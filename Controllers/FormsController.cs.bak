using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Net;
using StrawmanApp.Helpers;
using System.IO;
using Excel;
using ExcelApi;

namespace StrawmanApp.Controllers
{
    public class BOYCfg : Entities.BOY_CONFIG { };
    public class FormsController : Controller
    {
        private Entities.godzillaEntities1 db;
        private System.Data.Objects.ObjectSet<Entities.v_WRK_BOY_CUSTOM_DATA> tbases;
        private System.Data.Objects.ObjectSet<Entities.v_WRK_BOY_BASIC_DATA> tbase;
        //
        // GET: /Forms/

        public ActionResult Index()
        {
            Entities.godzillaEntities1 gent = new Entities.godzillaEntities1();                       
            Entities.BOY_CONFIG bc = new Entities.BOY_CONFIG();
            //var v = (from data in gent.BOY_CONFIG
            //         select new { ID = data.ID,BRAND = data.BRAND, CHANNEL = data.CHANNEL, EntityKey = data.EntityKey, MARKET = data.MARKET, NTS_NAME = data.NTS_NAME, NTS_ORDER = data.NTS_ORDER });
            var v = from data in gent.BOY_CONFIG.AsQueryable()
                    where data.NTS_NAME != null group new Entities.BoyConfigModel { vorder = (int)data.NTS_ORDER, name = data.NTS_NAME}
                    by data.NTS_NAME into ALT
                    select  ALT;
            var ret = gent.BOY_CONFIG.Where(m => m.NTS_NAME != null)
                    .GroupBy(m => new { m.NTS_NAME, m.NTS_ORDER })
                    .Select(m => new Entities.BoyConfigModel { vorder = m.Key.NTS_ORDER, name = m.Key.NTS_NAME });
                                
            return View(ret.ToList());
        }
        public ActionResult EditForm(string name,int order)
        {
            Entities.godzillaEntities1 gent = new Entities.godzillaEntities1();             
            ViewBag.Result = name;
            var ret = gent.BOY_CONFIG.Where(m => m.NTS_NAME == name &&  m.NTS_ORDER == order)                    
                    .Select(m => new Entities.BoyConfigModel { vorder = m.NTS_ORDER, name = m.NTS_NAME,brand = m.BRAND, market = m.MARKET});
            var lst = new List<Entities.BoyConfigModel>();
            foreach (Entities.BoyConfigModel b in ret.ToList())
            {
                var query = gent.BRAND_MASTER.Where(m => m.ID == b.brand && m.MARKET == b.market)
                                .Select(m => m).FirstOrDefault();
                var markets = gent.MARKET_MASTER.Where(m => m.ID == query.MARKET).Select(m => m).FirstOrDefault();
                lst.Add(new Entities.BoyConfigModel
                            { market = query.MARKET,
                              brand = query.ID,
                              market_name = markets.NAME,
                              brand_name = query.NAME,
                              name = b.name,
                              vorder = b.vorder
                            });
            }
            return PartialView("~/Views/Forms/_Result.cshtml",lst);
        }
        public ActionResult InsertData(string name, int order)
        {
            Entities.godzillaEntities1 gent = new Entities.godzillaEntities1();
            var lst = gent.BOY_CONFIG.Where(m => m.NTS_NAME == name && m.NTS_ORDER == order).Select(m => m);
            System.Linq.IQueryable<Entities.BRAND_MASTER> grp = gent.BRAND_MASTER.Select(m=>m);
            List<Entities.BRAND_MASTER> ret = grp.ToList();
            foreach (Entities.BOY_CONFIG b in lst)
            {
                ret.RemoveAll(m => m.ID == b.BRAND && m.MARKET == b.MARKET);
            }
            Entities.ListModel lm = new Entities.ListModel();
            lm.datamaster = ret;
            lm.brand_master = ret.Select(item => new SelectListItem
            {
                Value = item.ID.ToString(),
                Text = item.NAME.ToString()
            });
            return PartialView("~/Views/Forms/_List.cshtml", lm);
        }
        public ActionResult InsertField(Entities.ListModel var)
        {
            string name="";
            int order=0;
            string id = var.selectedId;
            Entities.godzillaEntities1 gent = new Entities.godzillaEntities1();
            gent.BOY_CONFIG.AddObject(new Entities.BOY_CONFIG{BRAND = 0,MARKET = 0, CHANNEL = 0, ID = 0, NTS_NAME="",NTS_ORDER= 0});
            gent.SaveChanges();
            return PartialView(EditForm(name, order));
        }

        public ActionResult BOYConfigure()
        {
            channel = sc.getChannel(sc.CHANNEL_MASS);
            Models.BOYFormModel bf = null;

            List<Models.BOYFormModel> formModel = new List<Models.BOYFormModel>();
            List<Models.BoyMassMarketModels> lst = GetBoyYTDData("YTD");
          
            List<Models.BoyMassMarketModels> _int = GetBoyCalcCustomData("INT");
            List<Models.BoyMassMarketModels> _le = GetBoyCalcCustomData("LE");
            List<Models.BoyMassMarketModels> _pbp = GetBoyCalcCustomData("PBP");
            foreach (Models.BoyMassMarketModels item in lst)
            {
                
                bf = new Models.BOYFormModel(
                        _int.Where(m=>m.brand == item.brand && m.market == item.market && m.channel == item.channel).FirstOrDefault(),
                        _le.Where(m => m.brand == item.brand && m.market == item.market && m.channel == item.channel).FirstOrDefault(),
                        _pbp.Where(m => m.brand == item.brand && m.market == item.market && m.channel == item.channel).FirstOrDefault());
                bf.item = item;
                formModel.Add(bf);
            }


            return View(formModel);
        }
        private List<Models.BoyMassMarketModels> GetBoyCalcCustomData(string type)
        {
            IEnumerable<Models.BoyMassMarketModels> query = null;            
            switch (type)
            {
                case "INT":
                    if (GetSessionData("v_WRK_BOY_CALC_DATA_INT") == null)
                    {
                        SetSessionData("v_WRK_BOY_CALC_DATA_INT");
                    }
                    query = from p in (IEnumerable<Models.BoyMassMarketModels>)GetSessionData("v_WRK_BOY_CALC_DATA_INT")
                            where p.type == type && p.channel == channel
                            select p;
                    break;
                case "PBP":
                    if (GetSessionData("v_WRK_BOY_CALC_DATA_PBP") == null)
                    {
                        SetSessionData("v_WRK_BOY_CALC_DATA_PBP");
                    }
                    query = from p in (IEnumerable<Models.BoyMassMarketModels>)GetSessionData("v_WRK_BOY_CALC_DATA_PBP")
                            where p.type == type && p.channel == channel
                            select p;                   
                    break;
                case "LE":
                    if (GetSessionData("v_WRK_BOY_CALC_DATA_LE") == null)
                    {
                        SetSessionData("v_WRK_BOY_CALC_DATA_LE");
                    }
                    query = from p in (IEnumerable<Models.BoyMassMarketModels>)GetSessionData("v_WRK_BOY_CALC_DATA_LE")
                            where p.type == type && p.channel == channel
                            select p;                     
                    break;
                default:
                    query = from p in tbases
                            where p.TYPE == type 
                            select new Models.BoyMassMarketModels
                            {
                                channel = p.CHANNEL,
                                brand = p.BRAND,
                                brand_name = p.BRAND_NAME,
                                boy_name = p.NTS_NAME,
                                vgroup = p.GROUP,
                                market = p.MARKET,
                                market_col1 = p.MARKET_COL1,
                                market_pc = p.MARKET_PC,
                                sellin_col1 = p.SELLIN_COL1,
                                sellin_pc = p.SELLIN_PC,
                                sellout_col1 = p.SELLOUT_COL1,
                                sellout_pc = p.SELLOUT_PC,
                                type = p.TYPE,
                                market_name = p.MARKET_NAME,
                                market_type = p.MARKET_TYPE,
                                market_boy = p.MARKET_BOY,
                                market_id = (int)p.MARKET_ID,
                                market_col2 = p.MARKET_COL2,
                                sellin_boy = p.SELLIN_BOY,
                                sellin_col2 = p.SELLIN_COL2,
                                sellin_id = (int)p.SELLIN_ID,
                                sellin_type = p.SELLIN_TYPE,
                                sellout_boy = p.SELLOUT_BOY,
                                sellout_col2 = p.SELLOUT_COL2,
                                sellout_id = (int)p.SELLOUT_ID,
                                sellout_type = p.SELLOUT_TYPE
                            };
                    break;
            }
            return query.ToList();
        }

        private List<Models.BoyMassMarketModels> GetBoyYTDData(string type)
        {
            if (GetSessionData("v_WRK_BOY_BASIC_DATA") == null)
            {
                SetSessionData("v_WRK_BOY_BASIC_DATA");
            }
            List<Models.BoyMassMarketModels> _tbase = GetSessionData("v_WRK_BOY_BASIC_DATA");
            var query = from p in _tbase
                        where p.type == type && p.channel == channel
                        select p;
            return query.ToList();
        }

        public ActionResult GroupsConfigure()
        {
            return View();
        }
        
        public ActionResult GetGroups()
        {
            Entities.godzillaEntities1 db = new Entities.godzillaEntities1();
            var query = db.GROUP_MASTER.Select(m => m);
            List<Entities.GROUP_MASTER> ret = query.ToList();
            Entities.GroupListModel lm = new Entities.GroupListModel();
            lm.datamaster = ret;
            lm.group_master = ret.Select(item => new SelectListItem
            {
                Value = item.ID.ToString(),
                Text = item.NAME.ToString()
            });
            return PartialView("~/Views/Forms/_GroupList.cshtml", lm);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult GetGroupsAjax()
        {
            Entities.godzillaEntities1 db = new Entities.godzillaEntities1();
            var query = db.GROUP_MASTER.Select(m => m);
            List<Entities.GROUP_MASTER> ret = query.ToList();
            Entities.GroupListModel lm = new Entities.GroupListModel();
            lm.datamaster = ret;
            lm.group_master = ret.Select(item => new SelectListItem
            {
                Value = item.ID.ToString(),
                Text = item.NAME.ToString()
            });
            return PartialView("~/Views/Forms/_GroupList.cshtml", lm);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult NewGroup()
        {
            Entities.NewGroupModel ngoup = new Entities.NewGroupModel();
            List<SelectListItem> t = new List<SelectListItem>();
            for (int i = 0; i<5; i++){ t.Add(new SelectListItem{ Text = i.ToString(), Value = i.ToString(), Selected = (i==0) });}
            ngoup.levellist = t;
            Entities.godzillaEntities1 db = new Entities.godzillaEntities1();
            ngoup.typelist = db.GROUP_TYPES.Select(m =>m).AsEnumerable().Select(item => new SelectListItem
            {
                Text = item.NAME.ToString(), Value = item.ID.ToString()
            });
            return PartialView("~/Views/Forms/_NewGroup.cshtml", ngoup);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult SelectGroup(string _selectedId)
        { 
            Entities.EditGroupModel ngoup = new Entities.EditGroupModel();
            using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
            {
                int _id = int.Parse(_selectedId);
                var q = db.GROUP_MASTER.Where(m=>m.ID == (decimal)_id).Select(m => m);
                Entities.GROUP_MASTER s = q.FirstOrDefault();
                ngoup.editcoll = q.ToList();
                ngoup.name = s.NAME;
                ngoup.selectedId = s.ID.ToString();
                List<SelectListItem> t = new List<SelectListItem>();
                for (int i = 0; i < 5; i++) { t.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString(), Selected = (i == 0) }); }                
                ngoup.levellist = t;
                ngoup.level = (int)s.LEVEL;
                ngoup.typelist = db.GROUP_TYPES.Select(m => m).AsEnumerable().Select(item => new SelectListItem
                {
                    Text = item.NAME.ToString(),
                    Value = item.ID.ToString()
                }).ToList();
                ngoup.type = (int)s.TYPE;
            }
            ViewBag.ActionName = "UpdateGroup";
            return PartialView("~/Views/Forms/_EditGroup.cshtml", ngoup);
        }
        
        #region GetKPI
        public ActionResult KPIConfigure()
        {
            return View();
        }

        public ActionResult GetKPI()
        {
            Entities.godzillaEntities1 db = new Entities.godzillaEntities1();
            var query = db.KPI_MASTER.Select(m => m);
            List<Entities.KPI_MASTER> ret = query.ToList();            
            return PartialView("~/Views/Forms/_KPIList.cshtml", ret);
        }
        public ActionResult InsertKPI(Entities.ListModel var)
        {
            string name = "";
            int order = 0;
            string id = var.selectedId;
            Entities.godzillaEntities1 gent = new Entities.godzillaEntities1();
            gent.KPI_MASTER.AddObject(new Entities.KPI_MASTER { NAME = "", GROUP = 0});
            gent.SaveChanges();
            return PartialView(EditForm(name, order));
        }
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult SelectKPI(string _selectedId)
        {
            string _column = "NTS";
            Entities.EditKPIModel ngoup = new Entities.EditKPIModel();
            using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
            {
                int _id = int.Parse(_selectedId);
                var q = db.KPI_CONFIG.Where(m => m.KPI == (decimal)_id).Where(m=>m.KPI_COLUMN == _column).Select(m => m);
                
                ngoup.itemslist = q.ToList();
                
                ngoup.selectedId = _id.ToString();            
            }

            ViewBag.ActionName = "UpdateGroup";
            return PartialView("~/Views/Forms/_KPIItemsList.cshtml", ngoup);
        }
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult ShowKPIList(string _selectedId)
        {
            Entities.EditKPIModel ngroup = new Entities.EditKPIModel();
            ngroup.selectedId = _selectedId;
            using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
            {                
                int _id = int.Parse(_selectedId);
                ngroup.additemslist = db.WRK_BOY_BASIC_DATA.Where(m=>m.TYPE=="TOTALS").Select(m=>m).ToList();
                ngroup.itemslist = db.KPI_CONFIG.Where(m => m.KPI == (decimal)_id).Select(m => m).ToList();

            }
            ViewBag.ActionName = "UpdateItemsKPI";
            return PartialView("~/Views/Forms/_KPIItemsList.cshtml", ngroup);
        }

        [HttpPost]
        public JsonResult UpdateItemsKPI(FormCollection data)
        {
            int result = 0;
            List<int> selected = new List<int>();
            try
            {
                int selectedId = int.Parse(data["selectedId"]);
                string datos = data["selectedItems"];
                foreach (string value in datos.Split(','))
                {                    
                    if(!value.Equals("false")){
                        int sel = int.Parse(value);
                        selected.Add(sel);
                    }
                }
                // TODO: Add insert logic here
                if (selected != null)
                {
                    using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
                    {
                        var q = db.KPI_CONFIG.Where(m => m.KPI == selectedId).Select(m => m);
                        foreach (Entities.KPI_CONFIG item in q.ToList())
                        {
                            db.KPI_CONFIG.DeleteObject(item);
                        }

                        foreach (int i in selected)
                        {
                            var t = db.WRK_BOY_BASIC_DATA.Where(m => m.ID == i).FirstOrDefault();
                            db.KPI_CONFIG.AddObject(new Entities.KPI_CONFIG
                            {
                                MARKET = t.MARKET,
                                BRAND = t.BRAND,
                                BRAND_NAME = (t.BRAND_NAME == null)? t.NTS_NAME: t.BRAND_NAME,
                                CHANNEL = t.CHANNEL,
                                KPI = selectedId,
                                KPI_COLUMN = "NTS",
                                CONFIG = 1
                            });
                        }

                        result = db.SaveChanges();
                    }
                }
                return new JsonResult() { Data = new { Success = true, Result = result } };
            }
            catch (Exception ex)
            {
                return new JsonResult
                {
                    Data = new { ErrorMessage = ex.Message, Success = false },
                    ContentEncoding = System.Text.Encoding.UTF8,
                    JsonRequestBehavior = JsonRequestBehavior.DenyGet
                };
            }
        }


        #endregion
        
        //
        // GET: /Forms/Details/5
        public ActionResult Details(int id)
        {
            return View();
        }

        //
        // GET: /Forms/Create

        public ActionResult Create()
        {
            return View();
        }

        //
        // POST: /Forms/Create

        [HttpPost]
        public JsonResult InsertGroup(Entities.NewGroupModel collection)
        {
            int result = 0;
            try
            {
                // TODO: Add insert logic here
                using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
                {
                    var q = db.GROUP_TYPES.Where(m => m.ID == collection.type).Select(m => m.BASE_ID).FirstOrDefault();

                    int value = (int)q;


                    db.GROUP_MASTER.AddObject(new Entities.GROUP_MASTER
                    {
                        BASE_ID = value,
                        LEVEL = collection.level,
                        TYPE = collection.type,
                        NAME = collection.name
                    });

                    result = db.SaveChanges();
                }

                return new JsonResult() { Data = new { Success = true, Result = result } };
            }
            catch (Exception ex)
            {
                return new JsonResult
                {
                    Data = new { ErrorMessage = ex.Message, Success = false },
                    ContentEncoding = System.Text.Encoding.UTF8,
                    JsonRequestBehavior = JsonRequestBehavior.DenyGet
                };
            }
        }
        public JsonResult UpdateGroup(Entities.NewGroupModel collection)
        {
            int result = 0;
            try
            {
                // TODO: Add insert logic here
                using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
                {
                    var q = db.GROUP_TYPES.Where(m => m.ID == collection.type).Select(m => m.BASE_ID).FirstOrDefault();

                    int value = (int)q;

                    int _id = int.Parse(collection.selectedId);
                    
                    Entities.GROUP_MASTER u = db.GROUP_MASTER.Where(i=>i.ID == (decimal)_id).Select(m=>m).FirstOrDefault();

                    if (u!=null){
                                            
                        u.BASE_ID = (collection.type != u.TYPE)?value:u.BASE_ID;
                        u.LEVEL = (collection.level != u.LEVEL)?collection.level:u.LEVEL;
                        u.TYPE = (collection.type != u.TYPE)?collection.type:u.TYPE;
                        u.NAME = (collection.name != u.NAME) ? collection.name : u.NAME;
                    };

                    result = db.SaveChanges();
                }

                return new JsonResult() { Data = new { Success = true, Result = result } };
            }
            catch (Exception ex)
            {
                return new JsonResult
                {
                    Data = new { ErrorMessage = ex.Message, Success = false },
                    ContentEncoding = System.Text.Encoding.UTF8,
                    JsonRequestBehavior = JsonRequestBehavior.DenyGet
                };
            }
        }
        public JsonResult DeleteGroup(Entities.NewGroupModel collection)
        {
            int result = 0;
            try
            {
                using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
                {
                    int _id = int.Parse(collection.selectedId);

                    Entities.GROUP_MASTER u = db.GROUP_MASTER.Where(i => i.ID == (decimal)_id).Select(m => m).FirstOrDefault();

                    if (u != null)
                    {
                        db.GROUP_MASTER.DeleteObject(u);
                    }
                    db.SaveChanges();
                }

                return new JsonResult() { Data = new { Success = true, Result = result } };
            }
            catch (Exception ex)
            {
                return new JsonResult
                {
                    Data = new { ErrorMessage = ex.Message, Success = false },
                    ContentEncoding = System.Text.Encoding.UTF8,
                    JsonRequestBehavior = JsonRequestBehavior.DenyGet
                };
            }
        }

        public JsonResult UpdateBoy(FormCollection collection)
        {
            int result = 0;
            try
            {
                //Recuperamos la caché del modelo
                Entities.EditBOYModel model = (Entities.EditBOYModel)GetSessionObject("EditBOYModel");
                // TODO: Add Update logic here
                using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
                {                    
                    //INT
                    Entities.EditBOY qint = model.INT;
                    ///PBP
                    Entities.EditBOY qpbp = model.PBP;
                    //LE
                    Entities.EditBOY qle = model.BTG;

                    //Actualizamos datos MARKET
                    List<Entities.STRWM_BOY_DATA> sbd = db.STRWM_BOY_DATA.Where(m => m.ID == qint.market_id || m.ID == qpbp.market_id || m.ID == qle.market_id).Select(m => m).ToList();
                    sbd.Find(m => m.ID == qint.market_id).INT = qint.market_pc_f;
                    sbd.Find(m => m.ID == qpbp.market_id).PBP = qpbp.market_pc_f;
                    sbd.Find(m => m.ID == qle.market_id).BTG = qle.market_pc_f;

                    //Actualizamos datos SELLOUT
                    List<Entities.STRWM_BOY_DATA> sbso = db.STRWM_BOY_DATA.Where(m => m.ID == qint.sellout_id || m.ID == qpbp.sellout_id || m.ID == qle.sellout_id).Select(m => m).ToList();
                    sbso.Find(m => m.ID == qint.sellout_id).INT = qint.sellout_pc_f;
                    sbso.Find(m => m.ID == qpbp.sellout_id).PBP = qpbp.sellout_pc_f;
                    sbso.Find(m => m.ID == qle.sellout_id).BTG = qle.sellout_pc_f;

                    //Actualizamos datos SELLIN
                    List<Entities.STRWM_BOY_DATA> sbsi = db.STRWM_BOY_DATA.Where(m => m.ID == qint.sellin_id || m.ID == qpbp.sellin_id || m.ID == qle.sellin_id).Select(m => m).ToList();
                    sbsi.Find(m => m.ID == qint.sellin_id).INT = qint.sellin_pc_f;
                    sbsi.Find(m => m.ID == qpbp.sellin_id).PBP = qpbp.sellin_pc_f;
                    sbsi.Find(m => m.ID == qle.sellin_id).BTG = qle.sellin_pc_f;

                    //int _id = int.Parse(collection.selectedId);

                    //Entities.GROUP_MASTER u = db.GROUP_MASTER.Where(i => i.ID == (decimal)_id).Select(m => m).FirstOrDefault();

                    //if (u != null)
                    //{

                    //    u.BASE_ID = (collection.type != u.TYPE) ? value : u.BASE_ID;
                    //    u.LEVEL = (collection.level != u.LEVEL) ? collection.level : u.LEVEL;
                    //    u.TYPE = (collection.type != u.TYPE) ? collection.type : u.TYPE;
                    //    u.NAME = (collection.name != u.NAME) ? collection.name : u.NAME;
                    //};

                    //Salvamos datos y devolvemos el resultado.
                    result = db.SaveChanges();
                }
                RefreshDataCache();
                return new JsonResult() { Data = new { Success = true, Result = result } };
            }
            catch (Exception ex)
            {
                return new JsonResult
                {
                    Data = new { ErrorMessage = ex.Message, Success = false },
                    ContentEncoding = System.Text.Encoding.UTF8,
                    JsonRequestBehavior = JsonRequestBehavior.DenyGet
                };
            }
        }

        private void RefreshDataCache()
        {
            //Borramos las tablas temporales para obligar a cargar los datos de la base de datos de nuevo
            SetSessionObject("v_WRK_BOY_CALC_DATA_INT", null);
            SetSessionObject("v_WRK_BOY_CALC_DATA_LE", null);
            SetSessionObject("v_WRK_BOY_CALC_DATA_PBP", null);
            SetSessionObject("v_WRK_BOY_CALC_DATA", null);
            //Cargamos los datos de la tabla maestra
            SetSessionData("v_WRK_BOY_CALC_DATA");

        }
        
        public ActionResult CalcBoyCfg(int _id, string type, int brand, int market, int channel, string control, string column, string value)
        {
            int result = 0;
            double? calc = 0, org_val = 0, org_val2 = 0, pbp_val = 0;

            bool is_pc = false;

            double ma_total = 0;
            double si_total = 0;
            double so_total = 0;

            double ma_ytd = 0;
            double si_ytd = 0;
            double so_ytd = 0;

            double ma_togo = 0;
            double si_togo = 0;
            double so_togo = 0;

            double ma_le = 0;
            double si_le = 0;
            double so_le = 0;

            double ma_pbp_pc = 0;
            double si_pbp_pc = 0;
            double so_pbp_pc = 0;

            string _column = "", _type = "";

            this.channel = channel;            
            Models.BoyMassMarketModels bmaux = new Models.BoyMassMarketModels();
            Models.BOYFormModel bf = new Models.BOYFormModel();
            Entities.EditBOYModel bm = (Entities.EditBOYModel)GetSessionObject("EditBOYModel");

            if (control.EndsWith("_pc"))
            {
                is_pc = true;
                double val = 0;
                if (value.TrimEnd().EndsWith("%"))
                {
                    val = double.Parse(value.Replace("%", "").Replace(".",",").Trim());                    
                }
                else
                {
                    val = double.Parse(value.Trim());
                }
                calc = val/100;
            }
        //Recalculo el porcentaje teneindo en cuenta la modificación del total.
        using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
        {
            //TODO: Antes de recuperar los datos de las tablas temporales hay que hacer una consulta a la base de datos para saber si se ha modificado la tabla desde la última consulta.
            List<Models.BoyMassMarketModels> lstaux = GetBoyYTDData("YTD");
            bmaux = lstaux.Where(i => i.brand == brand && i.market == market && i.channel == channel).FirstOrDefault();
            List<Models.BoyMassMarketModels> lst = GetSessionData("v_WRK_BOY_BASIC_DATA");
            if (lst == null) lst = db.v_WRK_BOY_BASIC_DATA
                                            .Where(i => i.BRAND == brand && i.MARKET == market && i.CHANNEL == channel)
                                            .Select(m => new Models.BoyMassMarketModels { 
                                                        type = m.TYPE,
                                                        brand = m.BRAND,
                                                        market = m.MARKET,                                                                                                                                                        
                                                        market_col1 = (double?)m.MARKET_CO1,
                                                        market_col2 = (double?)m.MARKET_COL2,
                                                        sellout_col1 = (double?)m.SELLOUT_COL1,
                                                        sellout_col2 = (double?)m.SELLOUT_COL2,
                                                        sellin_col1 = (double?)m.SELLIN_COL1,
                                                        sellin_col2 = (double?)m.SELLIN_COL2
                                                        }).ToList();

            var d = lst.Where(i => i.brand == brand && i.market == market && i.channel == channel).Select(m => m);

            ma_total = (double)d.FirstOrDefault(i=>i.type == "TOTALS").market_col2;
            si_total = (double)d.FirstOrDefault(i => i.type == "TOTALS").sellin_col2;
            so_total = (double)d.FirstOrDefault(i => i.type == "TOTALS").sellout_col2;

            ma_ytd = (double)d.FirstOrDefault(i => i.type == "YTD").market_col2;
            si_ytd = (double)d.FirstOrDefault(i => i.type == "YTD").sellin_col2;
            so_ytd = (double)d.FirstOrDefault(i => i.type == "YTD").sellout_col2;

            ma_togo = (double)d.FirstOrDefault(i => i.type == "TOGO").market_col1;
            si_togo = (double)d.FirstOrDefault(i => i.type == "TOGO").sellin_col1;
            so_togo = (double)d.FirstOrDefault(i => i.type == "TOGO").sellout_col1;
        }
        using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
        {
            //Hay que contar con que se pueden haber modificado los valores BTG y LE, por lo que el cálculo de PBP dependerá de ello.
            //Comprobamos que no existe la caché para el modelo y si es así obtenemos los datos que le corresponden para el cálculo.
            if (bm == null)
            {
                List<Models.BoyMassMarketModels> lst = GetSessionData("v_WRK_BOY_CALC_DATA_PBP");
                db.CommandTimeout = 50000;
                if (lst == null) lst = db.v_WRK_BOY_CALC_DATA_PBP
                                        .Where(i => (decimal)i.BRAND == brand && i.MARKET == (decimal)market && i.CHANNEL == (decimal)channel)
                                        .Select(m => new Models.BoyMassMarketModels
                                                        {
                                                            type = m.TYPE,
                                                            brand = m.BRAND,
                                                            market = m.MARKET,
                                                            market_col1 = m.MARKET_COL1,
                                                            sellin_col1 = m.SELLIN_COL1,
                                                            sellout_col1 = m.SELLOUT_COL1,
                                                        }).ToList();
                var l = lst.Where(i => (decimal)i.brand == brand && i.market == (decimal)market && i.channel == (decimal)channel).Select(m => m).FirstOrDefault();
                //Obtenemos los originale para el cálculo de PBP
                ma_le = (double)l.market_col1;
                si_le = (double)l.sellin_col1;
                so_le = (double)l.sellout_col1;

                ma_pbp_pc = (double)l.market_boy;
                si_pbp_pc = (double)l.sellin_boy;
                so_pbp_pc = (double)l.sellout_boy;
            }
            else
            {
                //La caché del modelo ha sido generada, por lo que tenemos que realizar el cálculo con los datos del formulario.
                ma_le = (double)bm.BTG.market_col1;
                si_le = (double)bm.BTG.sellin_col1;
                so_le = (double)bm.BTG.sellout_col1;
            }
        }
        double ma_value = 0, ma_value2 = 0, si_value= 0, si_value2 = 0, so_value= 0, so_value2 = 0;
                    
            if (column.Contains("PBP")) _type = "PBP";
            if (column.Contains("INT")) _type = "INT";
            if (column.Contains("LE")) _type = "BTG";

            if (column.Contains("MARKET")) _column = "MARKET";
            if (column.Contains("SELLIN")) _column = "SELLIN";
            if (column.Contains("SELLOUT")) _column = "SELLOUT";

        //calculo del procentaje
        //El cálculo se realizará para el total si se ha modificado el porcentaje, o para el porcentaje si se ha modificado el total.
        //hay que tener en cuenta el caso especial de LE, ya que se tiene que calcular siempre LE y PBP
            if (!is_pc)
            {
                switch (_type)
                {
                    case "PBP":
                        ma_value = (double.Parse(value) / ma_le) - 1;
                        si_value = (double.Parse(value) / si_le) - 1;
                        so_value = (double.Parse(value) / so_le) - 1;
                        break;
                    case "INT":
                        ma_value = (double.Parse(value) / ma_total) - 1;
                        si_value = (double.Parse(value) / si_total) - 1;
                        so_value = (double.Parse(value) / so_total) - 1;
                        break;
                    case "BTG":
                        double ma_btg_tmp = 0, si_btg_tmp = 0, so_btg_tmp = 0;
                        if (control.Contains("market_col2")) //Corresponde a BTG
                        {
                            ma_btg_tmp = (double.Parse(value));
                            si_btg_tmp = (double.Parse(value));
                            so_btg_tmp = (double.Parse(value));
                        }
                        else //corresponde a LE
                        {
                            ma_btg_tmp = (double.Parse(value)) - ma_ytd;
                            si_btg_tmp = (double.Parse(value)) - si_ytd;
                            so_btg_tmp = (double.Parse(value)) - so_ytd;
                        }
                        ma_value = ((ma_btg_tmp) / ma_togo) - 1;
                        si_value = ((si_btg_tmp) / si_togo) - 1;
                        so_value = ((so_btg_tmp) / so_togo) - 1;
                        break;
                }
                switch (_column)
                {
                    case "MARKET":
                        calc = ma_value;                                
                        break;
                    case "SELLOUT":
                        calc = so_value;                                
                        break;
                    case "SELLIN":
                        calc = si_value;                                
                        break;
                }
                //En el caso de que no sea un cálculo para btg, asignamos el valor de la columna original.
                org_val = double.Parse(value);
                //Si se trata de BTG:                        
                if (_type == "BTG")
                {
                    //Asignamos el valor de esa operación a la columna BTG (org_val) y el valor recibido al LE (org_val2)  
                    org_val2 = org_val;
                    //1- Identificamos cuál de las dos columnas se trata (LE o BTG)
                    if (control.Contains("market_col2")) //Corresponde a BTG
                    {
                        //2- Si es la columna BTG, asignamos el valor original a la columna BTG (org_val) y la LE (org_val2) se calcula sumándole el ytd correspondiente.
                        org_val = org_val2;
                        if (_column == "MARKET") org_val2 = org_val + ma_ytd; //para market
                        else if (_column == "SELLOUT") org_val2 = org_val + so_ytd; //para sellout
                        else if (_column == "SELLIN") org_val2 = org_val + si_ytd; //para sellin
                    }
                    else
                    {
                        //3- Si la columna modificada es la LE, debemos restarle el valor ytd correspondiente para hallar el nuevo valor BTG.
                        if (_column == "MARKET") org_val = org_val2 - ma_ytd; //para market
                        else if (_column == "SELLOUT") org_val = org_val2 - so_ytd; //para sellout
                        else if (_column == "SELLIN") org_val = org_val2 - si_ytd; //para sellin
                    }
                    
                }
                        
                        

            }
            else
            {
                //Es un porcentaje modificado, por lo que hay que calcular totales:
                switch (_type)
                {
                    case "PBP":
                        ma_value = ((double)calc + 1) * (ma_le);
                        si_value = ((double)calc + 1) * (si_le);
                        so_value = ((double)calc + 1) * (so_le);
                        break;
                    case "INT":
                        ma_value = ((double)calc + 1) * (ma_total);
                        si_value = ((double)calc + 1) * (si_total);
                        so_value = ((double)calc + 1) * (so_total);
                        break;
                    case "BTG":

                        //Calculos para la columna BTG modificada.
                        ma_value = ((double)calc + 1) * (ma_togo);
                        si_value = ((double)calc + 1) * (si_togo);
                        so_value = ((double)calc + 1) * (so_togo); 
                        //recalculamos el valor de LE.
                        ma_value2 = ma_value + ma_ytd;
                        si_value2 = si_value + si_ytd;
                        so_value2 = so_value + so_ytd;
                        break;
                }
                //asignamos el valor calculado a la varible genérica org_val y org_val2 (solo para BTG).
                switch (_column)
                {
                    case "MARKET":
                        org_val = ma_value;
                        org_val2 = ma_value2;
                        break;
                    case "SELLOUT":
                        org_val = so_value;
                        org_val2 = so_value2;
                        break;
                    case "SELLIN":
                        org_val = si_value;
                        org_val2 = si_value2;
                        break;
                }

            }                

            if (_type == "BTG") 
            {
                //  Es necesario volver a calcular el entero de PBP en el caso de modificar LE/BTG
                // Calculamos los valores tanto de cantidad como de porcentaje para PBP en este caso.
                // Cantidades
                double pbp_value_pc = 0;
                //En el caso de que se modifique LE (BTG) hay que obtener el porcentaje para PBP de la caché para volver a calcular el entero:            
                if (_column == "MARKET") pbp_value_pc = bm == null? ma_pbp_pc: (double)bm.PBP.market_pc_f;
                if (_column == "SELLOUT")pbp_value_pc = bm == null? so_pbp_pc: (double)bm.PBP.sellout_pc_f;                      
                if (_column == "SELLIN") pbp_value_pc = bm == null? si_pbp_pc: (double)bm.PBP.sellin_pc_f;

                pbp_val = ((double)pbp_value_pc + 1) * (org_val2); //(pbp_value_pc) / org_val) - 1; 
            }
            try
            {
                using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
                {
                    //Preparamos el ViewBag para llevar los datos del la consulta original a modo de control.                   

                    bf.INT = GetBoyCalcCustomData("INT").Where(m => m.brand == brand && m.market == market && m.channel == channel).FirstOrDefault(); ;
                    bf.BTG = GetBoyCalcCustomData("LE").Where(m => m.brand == brand && m.market == market && m.channel == channel).FirstOrDefault(); ;
                    bf.PBP = GetBoyCalcCustomData("PBP").Where(m => m.brand == brand && m.market == market && m.channel == channel).FirstOrDefault(); ;
                    bf.item = GetBoyYTDData("YTD").Where(m => m.brand == brand && m.market == market && m.channel == channel).FirstOrDefault(); 
                    bm = bm == null?SetEditBoyModel(bf,brand, market, channel):bm;
                    
                    
                    db.CommandTimeout = 50000;
                    Entities.STRWM_BOY_DATA u = db.STRWM_BOY_DATA.Where(i=>i.ID == (decimal) _id).Select(m => m).FirstOrDefault();
                    //List<Models.BoyMassMarketModels> lst  = null;
                    switch (_type)
                    {
                        case "PBP":
                            //lst = GetSessionData("v_WRK_BOY_CALC_DATA_PBP");
                            //lst = lst.Where(m => m.brand == brand && m.market == market && m.channel == channel).Select(m=>m).ToList();
                            bm.PBP.market_col1 = column.Contains("MARKET") ? org_val : bm.PBP.market_col1;
                            bm.PBP.sellin_col1 = column.Contains("SELLIN") ? org_val : bm.PBP.sellin_col1;
                            bm.PBP.sellout_col1 = column.Contains("SELLOUT") ? org_val : bm.PBP.sellout_col1;
                            bm.PBP.market_pc = column.Contains("MARKET") ? (decimal?)calc*100 : bm.PBP.market_pc;                            
                            bm.PBP.sellin_pc = column.Contains("SELLIN") ? (decimal?)calc*100 : bm.PBP.sellin_pc;                            
                            bm.PBP.sellout_pc = column.Contains("SELLOUT") ? (decimal?)calc*100 : bm.PBP.sellout_pc;
                            bm.PBP.market_pc_f = column.Contains("MARKET") ? calc : bm.PBP.market_pc_f;
                            bm.PBP.sellin_pc_f = column.Contains("SELLIN") ? calc : bm.PBP.sellin_pc_f;
                            bm.PBP.sellout_pc_f = column.Contains("SELLOUT") ? calc : bm.PBP.sellout_pc_f;
                            break;
                        case "INT":
                            //lst = GetSessionData("v_WRK_BOY_CALC_DATA_INT");
                            //lst = lst.Where(m => m.brand == brand && m.market == market && m.channel == channel).Select(m => m).ToList();
                            bm.INT.market_col1 = column.Contains("MARKET") ? org_val : bm.INT.market_col1;
                            bm.INT.sellin_col1 = column.Contains("SELLIN") ? org_val : bm.INT.sellin_col1;
                            bm.INT.sellout_col1 = column.Contains("SELLOUT") ? org_val : bm.INT.sellout_col1;
                            bm.INT.market_pc = column.Contains("MARKET") ? (decimal?)calc*100: bm.INT.market_pc;
                            bm.INT.sellin_pc = column.Contains("SELLIN") ? (decimal?)calc*100: bm.INT.sellin_pc;
                            bm.INT.sellout_pc = column.Contains("SELLOUT") ? (decimal?)calc*100: bm.INT.sellout_pc;
                            bm.INT.market_pc_f = column.Contains("MARKET") ? calc : bm.INT.market_pc_f;
                            bm.INT.sellin_pc_f = column.Contains("SELLIN") ? calc : bm.INT.sellin_pc_f;
                            bm.INT.sellout_pc_f = column.Contains("SELLOUT") ? calc : bm.INT.sellout_pc_f;
                            break;
                        case "BTG":
                            //lst = GetSessionData("v_WRK_BOY_CALC_DATA_LE");
                            //lst = lst.Where(m => m.brand == brand && m.market == market && m.channel == channel).Select(m => m).ToList();
                            bm.BTG.market_col1 = column.Contains("MARKET") ? org_val2 : bm.BTG.market_col1;
                            bm.BTG.market_col2 = column.Contains("MARKET") ? org_val : bm.BTG.market_col2;
                            bm.BTG.sellin_col1 = column.Contains("SELLIN") ? org_val2 : bm.BTG.sellin_col1;
                            bm.BTG.sellin_col2 = column.Contains("SELLIN") ? org_val : bm.BTG.sellin_col2;
                            bm.BTG.sellout_col1 = column.Contains("SELLOUT") ? org_val2 : bm.BTG.sellout_col1;
                            bm.BTG.sellout_col2 = column.Contains("SELLOUT") ? org_val : bm.BTG.sellout_col2;
                            bm.BTG.market_pc = column.Contains("MARKET") ? (decimal?)calc*100 : bm.BTG.market_pc;
                            bm.BTG.sellin_pc = column.Contains("SELLIN") ? (decimal?)calc*100 : bm.BTG.sellin_pc;
                            bm.BTG.sellout_pc = column.Contains("SELLOUT") ? (decimal?)calc*100 : bm.BTG.sellout_pc;
                            bm.BTG.market_pc_f = column.Contains("MARKET") ? calc : bm.BTG.market_pc_f;
                            bm.BTG.sellin_pc_f = column.Contains("SELLIN") ? calc : bm.BTG.sellin_pc_f;
                            bm.BTG.sellout_pc_f = column.Contains("SELLOUT") ? calc : bm.BTG.sellout_pc_f;
                            // Modificar LE o BTG no solo modifica las cantidades de LE y BTG, sino también las PBP. Hay que calcular la cantidad para PBP.
                            bm.PBP.market_col1 = column.Contains("MARKET") ? pbp_val : bm.PBP.market_col1;
                            bm.PBP.sellin_col1 = column.Contains("SELLIN") ? pbp_val : bm.PBP.sellin_col1;
                            bm.PBP.sellout_col1 = column.Contains("SELLOUT") ? pbp_val : bm.PBP.sellout_col1;
                            break;

                    }

                    bf.model = bm;

                    //Modo edición
                    bf.mode = Helpers.Modes.Edit;
                                       
                }
                SetSessionObject("EditBOYModel", bm);
                //Enviamos el modelo a la vista parcial para el formulario de modificación con un botón de Guardar activo para guardar los cambios.
                return PartialView(BOY_EDIT, bf);
            }
            catch (Exception ex)
            {
                return new JsonResult
                {
                    Data = new { ErrorMessage = ex.Message, Success = false },
                    ContentEncoding = System.Text.Encoding.UTF8,
                    JsonRequestBehavior = JsonRequestBehavior.DenyGet
                };
            }
        }

        #region Session Object Util

        private void SetSessionObject(string p, Entities.EditBOYModel bm)
        {
            if (Session[p] == null) Session.Add(p, bm);
            else Session[p] = bm;
        }

        private object GetSessionObject(string p)
        {
            if (Session[p] == null) return null;
            else return Session[p];
        }

        #endregion

        private Entities.EditBOYModel SetEditBoyModel(Models.BOYFormModel bf, int brand, int market, int channel)
        {
            Entities.EditBOYModel ebm = new Entities.EditBOYModel();
            List<Models.BoyMassMarketModels> lst = null;

            ebm.INT = new Entities.EditBOY
                       {
                           brand = bf.INT.brand,
                           market = bf.INT.market,
                           channel = bf.INT.channel,
                           market_col1 = bf.INT.market_col1,
                           sellin_col1 = bf.INT.sellin_col1,
                           sellout_col1 = bf.INT.sellout_col1,
                           market_col2= bf.INT.market_col2,
                           sellin_col2 = bf.INT.sellin_col2,
                           sellout_col2 = bf.INT.sellout_col2,
                           market_pc = bf.INT.market_pc,
                           sellin_pc = bf.INT.sellin_pc,
                           sellout_pc = bf.INT.sellout_pc,
                           market_id = bf.INT.market_id,
                           sellin_id = bf.INT.sellin_id,
                           sellout_id = bf.INT.sellout_id,
                           market_pc_f = bf.INT.market_boy,
                           sellin_pc_f = bf.INT.sellin_boy,
                           sellout_pc_f = bf.INT.sellout_boy
                       };


            lst = GetSessionData("v_WRK_BOY_CALC_DATA_PBP");
            ebm.PBP = new Entities.EditBOY
                       {
                           brand = bf.PBP.brand,
                           market = bf.PBP.market,
                           channel = bf.PBP.channel,
                           market_col1 = bf.PBP.market_col1,
                           sellin_col1 = bf.PBP.sellin_col1,
                           sellout_col1 = bf.PBP.sellout_col1,
                           market_col2 = bf.PBP.market_col2,
                           sellin_col2 = bf.PBP.sellin_col2,
                           sellout_col2 = bf.PBP.sellout_col2,
                           market_pc = bf.PBP.market_pc,
                           sellin_pc = bf.PBP.sellin_pc,
                           sellout_pc = bf.PBP.sellout_pc,
                           market_id = bf.PBP.market_id,
                           sellin_id = bf.PBP.sellin_id,
                           sellout_id = bf.PBP.sellout_id,
                           market_pc_f = bf.PBP.market_boy,
                           sellin_pc_f = bf.PBP.sellin_boy,
                           sellout_pc_f = bf.PBP.sellout_boy
                       };


            lst = GetSessionData("v_WRK_BOY_CALC_DATA_LE");
            ebm.BTG = new Entities.EditBOY
                       {
                           brand = bf.BTG.brand,
                           market = bf.BTG.market,
                           channel = bf.BTG.channel,
                           market_col1 = bf.BTG.market_col1,
                           sellin_col1 = bf.BTG.sellin_col1,
                           sellout_col1 = bf.BTG.sellout_col1,
                           market_col2 = bf.BTG.market_col2,
                           sellin_col2 = bf.BTG.sellin_col2,
                           sellout_col2 = bf.BTG.sellout_col2,
                           market_pc = bf.BTG.market_pc,
                           sellin_pc = bf.BTG.sellin_pc,
                           sellout_pc = bf.BTG.sellout_pc,
                           market_id = bf.BTG.market_id,
                           sellin_id = bf.BTG.sellin_id,
                           sellout_id = bf.BTG.sellout_id,
                           market_pc_f = bf.BTG.market_boy,
                           sellin_pc_f = bf.BTG.sellin_boy,
                           sellout_pc_f = bf.BTG.sellout_boy                          
                       };

            return ebm;
        }

        public JsonResult groupNameExist(string name)
        {
            bool exists = true;
            using (Entities.godzillaEntities1 db = new Entities.godzillaEntities1())
            {
                var q = db.GROUP_MASTER.Where(m => m.NAME == name).Select(m => m);
                List<Entities.GROUP_MASTER> lst = q.ToList();
                exists = !(lst.Count > 0);
            }


            return Json(exists);
        }
        //
        // GET: /Forms/Edit/5

        public ActionResult Edit(int id)
        {
            return View();
        }

        //
        // POST: /Forms/Edit/5

        [HttpPost]
        public ActionResult Edit(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add update logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        //
        // GET: /Forms/Delete/5

        public ActionResult Delete(int id)
        {
            return View();
        }

        //
        // POST: /Forms/Delete/5

        [HttpPost]
        public ActionResult Delete(int id, FormCollection collection)
        {
            try
            {
                // TODO: Add delete logic here

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }

        }

        private dynamic GetSessionData(string key)
        {
            List<Models.BoyMassMarketModels> list = null;
            if (Session[key] == null) return null;
            //if (Session[key] != null) list = (List<Models.BoyMassMarketModels>)Session[key];
            switch (key)
            {
                case "v_WRK_BOY_BASIC_DATA":
                    List<Entities.v_WRK_BOY_BASIC_DATA> table = (List<Entities.v_WRK_BOY_BASIC_DATA>) Session[key];
                    var query = from p in table select
                    new Models.BoyMassMarketModels
                    {
                        channel = p.CHANNEL,
                        brand = p.BRAND,
                        brand_name = p.BRAND_NAME,
                        boy_name = p.NTS_NAME,
                        conversion_rate1 = p.CONVERSION_RATE1,
                        conversion_rate2 = p.CONVERSION_RATE2,
                        vgroup = p.GROUP,
                        market = p.MARKET,
                        market_col1 = (double?)p.MARKET_CO1,
                        market_col2 = (double?)p.MARKET_COL2,
                        market_pc = p.MARKET_PC,
                        sellin_col1 = (double?)p.SELLIN_COL1,
                        sellin_col2 = (double?)p.SELLIN_COL2,
                        sellin_pc = p.SELLIN_PC,
                        sellout_col1 = (double?)p.SELLOUT_COL1,
                        sellout_col2 = (double?)p.SELLOUT_COL2,
                        sellout_pc = p.SELLOUT_PC,
                        share_col1 = p.SHARE_COL1,
                        share_col2 = p.SHARE_COL2,
                        share_pc = p.SHARE_PC,
                        type = p.TYPE
                    };
                    list = query.ToList();
                    break;
                case "v_WRK_BOY_CALC_DATA_LE":
                    List<Models.BoyMassMarketModels> cletable = (List<Models.BoyMassMarketModels>)Session[key];
                    var queryle = from p in cletable
                            select p;
                    list = queryle.ToList();
                    break;
                case "v_WRK_BOY_CALC_DATA_PBP":
                    var querypbp = from p in (List<Models.BoyMassMarketModels>)Session[key]
                            select p;
                    list = querypbp.ToList();
                   break;
                case "v_WRK_BOY_CALC_DATA_INT":
                   var queryint = from p in (List<Models.BoyMassMarketModels>)Session[key]
                           select p;
                   list = queryint.ToList();
                   break;
                case "v_WRK_BOY_CALC_DATA":
                   return (List<Entities.v_WRK_BOY_CALC_DATA>)Session[key];                   

            }

            return list;
        }

        private void SetSessionData(string table)
        {
        using (db = new Entities.godzillaEntities1())
        {            
            if (GetSessionData("v_WRK_BOY_CALC_DATA") == null)
            {
                var query = from p in db.v_WRK_BOY_CALC_DATA
                            where p.CHANNEL == channel
                            select p;
                Session.Add("v_WRK_BOY_CALC_DATA", query.ToList());
            }
            if (!String.IsNullOrEmpty(table))
            {
                List<Entities.v_WRK_BOY_CALC_DATA> calcDataTable = (List<Entities.v_WRK_BOY_CALC_DATA>)GetSessionData("v_WRK_BOY_CALC_DATA");

                    db.CommandTimeout = 50000;
                    switch (table)
                    {
                        case "v_WRK_BOY_BASIC_DATA":
                            var query = from p in db.v_WRK_BOY_BASIC_DATA
                                        where p.CHANNEL == channel
                                        select p;
                            Session.Add(table, query.ToList());
                            break;

                        case "v_WRK_BOY_CALC_DATA_LE":
                            var query_le = from p in calcDataTable
                                           where p.CHANNEL == channel && p.TYPE == "LE"
                                           select new Models.BoyMassMarketModels
                                           {
                                               channel = p.CHANNEL,
                                               brand = p.BRAND,
                                               brand_name = p.BRAND_NAME,
                                               boy_name = p.NTS_NAME,
                                               vgroup = p.GROUP,
                                               market = p.MARKET,
                                               market_col1 = p.MARKET_COL1,
                                               market_pc = p.MARKET_PC_TYPE,
                                               sellin_col1 = p.SELLIN_COL1,
                                               sellin_pc = p.SELLIN_PC_TYPE,
                                               sellout_col1 = p.SELLOUT_COL1,
                                               sellout_pc = p.SELLOUT_PC_TYPE,
                                               type = p.TYPE,
                                               market_name = p.BRAND_NAME,
                                               //market_type = p.MARKET_TYPE,
                                               market_boy = p.MARKET_PC_INT,
                                               market_id = (int)p.MARKET_ID,
                                               market_col2 = p.MARKET_COL2,
                                               sellin_boy = p.SELLIN_PC_INT,
                                               sellin_col2 = p.SELLIN_COL2,
                                               sellin_id = (int)p.SELLIN_ID,
                                               //sellin_type = p.SELLIN_TYPE,
                                               sellout_boy = p.SELLOUT_PC_INT,
                                               sellout_col2 = p.SELLOUT_COL2,
                                               sellout_id = (int)p.SELLOUT_ID
                                               //sellout_type = p.SELLOUT_TYPE
                                           };
                            Session.Add(table, query_le.ToList());
                            break;
                        case "v_WRK_BOY_CALC_DATA_INT":
                            var query_int = from p in calcDataTable
                                            where p.CHANNEL == channel && p.TYPE == "INT"
                                            select new Models.BoyMassMarketModels
                                            {
                                                channel = p.CHANNEL,
                                                brand = p.BRAND,
                                                brand_name = p.BRAND_NAME,
                                                boy_name = p.NTS_NAME,
                                                vgroup = p.GROUP,
                                                market = p.MARKET,
                                                market_col1 = (double?)p.MARKET_COL1,
                                                market_pc = p.MARKET_PC_TYPE,
                                                sellin_col1 = p.SELLIN_COL1,
                                                sellin_pc = p.SELLIN_PC_TYPE,
                                                sellout_col1 = (double?)p.SELLOUT_COL1,
                                                sellout_pc = p.SELLOUT_PC_TYPE,
                                                type = p.TYPE,
                                                market_name = p.BRAND_NAME,
                                                //market_type = p.MARKET_TYPE,
                                                market_boy = p.MARKET_PC_INT,
                                                market_id = (int)p.MARKET_ID,
                                                //market_col2 = (decimal?)p.MARKET_COL2,
                                                sellin_boy = (double?)p.SELLIN_PC_INT,
                                                //sellin_col2 = (decimal?)p.SELLIN_COL2,
                                                sellin_id = (int)p.SELLIN_ID,
                                                //sellin_type = p.SELLIN_TYPE,
                                                sellout_boy = p.SELLOUT_PC_INT,
                                                //sellout_col2 = (decimal?)p.SELLOUT_COL2,
                                                sellout_id = (int)p.SELLOUT_ID
                                                //sellout_type = p.SELLOUT_TYPE
                                            };
                            Session.Add(table, query_int.ToList());
                            break;
                        case "v_WRK_BOY_CALC_DATA_PBP":
                            var query_pbp = from p in calcDataTable
                                            where p.CHANNEL == channel && p.TYPE == "PBP"
                                            select new Models.BoyMassMarketModels
                                            {
                                                channel = p.CHANNEL,
                                                brand = p.BRAND,
                                                brand_name = p.BRAND_NAME,
                                                boy_name = p.NTS_NAME,
                                                vgroup = p.GROUP,
                                                market = p.MARKET,
                                                market_col1 = (double?)p.MARKET_COL1,
                                                market_pc = p.MARKET_PC_TYPE,
                                                sellin_col1 = (double?)p.SELLIN_COL1,
                                                sellin_pc = p.SELLIN_PC_TYPE,
                                                sellout_col1 = (double?)p.SELLOUT_COL1,
                                                sellout_pc = p.SELLOUT_PC_TYPE,
                                                type = p.TYPE,
                                                market_name = p.BRAND_NAME,
                                                //market_type = p.MARKET_TYPE,
                                                market_boy = p.MARKET_PC_INT,
                                                market_id = (int)p.MARKET_ID,
                                                //market_col2 = (decimal?)p.MARKET_COL2,
                                                sellin_boy = p.SELLIN_PC_INT,
                                                //sellin_col2 = (decimal?)p.SELLIN_COL2,
                                                sellin_id = (int)p.SELLIN_ID,
                                                //sellin_type = p.SELLIN_TYPE,
                                                sellout_boy = p.SELLOUT_PC_INT,
                                                //sellout_col2 = (decimal?)p.SELLOUT_COL2,
                                                sellout_id = (int)p.SELLOUT_ID
                                                //sellout_type = p.SELLOUT_TYPE
                                            };
                            Session.Add(table, query_pbp.ToList());
                            break;
                        default:
                            break;
                    }
                }
            }
        }

        #region Render Partials
        
        public PartialViewResult BOYForm()
        {
            return PartialView();
        }

        public PartialViewResult BOYFormComponent(int market, int brand, int channel)
        {
            Entities.EditBOYModel bm = (Entities.EditBOYModel)GetSessionData("EditBOYModel");


            Models.BOYFormModel bf = new Models.BOYFormModel();
            //bf.INT = GetBoyCalcCustomData("INT");
            //bf.LE = GetBoyCalcCustomData("LE");
            //bf.PBP = GetBoyCalcCustomData("PBP");
            //bf.lstaux = GetBoyYTDData("YTD");
            //bm._market = market;
            //bm._brand = brand;
            //bm._channel = channel;
            //bf.itemaux = bf.lstaux.Where(m => m.brand == brand && m.market == market && m.channel == channel).FirstOrDefault();
            //bf.editaux = bm;

            ////Reestablecemos el modelo de edición para evitar que se mezclen datos.
            //SetSessionObject("EditBOYModel", null);
            return PartialView(EDITED_BODY, bf);
        }

        #endregion

        #region upload file

        public ActionResult LoaderView()
        {
            Models.DropDownListModels ddl = new Models.DropDownListModels();
            //using(Entities.godzillaEntities1 db= new Entities.godzillaEntities1){
            //    var q = db.v_WRK_LOAD_FUNCTIONS.Select(m=>new SelectListItem{
            //         Text = m.text,
            //         Value = m.value
            //    });
            //    ddl.Items = q.ToList();
            //}
            return View(ddl);
        }

        [HttpPost]
        public virtual ActionResult UploadFile()
        {
            HttpPostedFileBase myFile = Request.Files[0];
            bool isUploaded = false;
            string message = "File upload failed";
            string fileName = "";

            if (myFile != null && myFile.ContentLength != 0)
            {
                string pathForSaving = Server.MapPath("~/Uploads");
                if (this.CreateFolderIfNeeded(pathForSaving))
                {
                    try
                    {
                        fileName = System.IO.Path.GetFileName(myFile.FileName);
                        myFile.SaveAs(Path.Combine(pathForSaving, fileName));
                        isUploaded = true;
                        message = "File uploaded successfully!";
                    }
                    catch (Exception ex)
                    {
                        message = string.Format("File upload failed: {0}", ex.Message);
                    }
                }
            }
            if (isUploaded)
            {
                return ProcessFile(fileName);
            }
            else
            {
                return Json(new { isUploaded = isUploaded, message = message, fileName = fileName }, "text/html");
            }
        }

        [HttpPost]
        public virtual ActionResult ProcessFile(string name)
        {
            string fileName = name;
            bool success = false;
            string message = "Error processing file...";
            string spath = Server.MapPath("~/Uploads");
            string path = Path.Combine(spath, fileName);
            string ext = Path.GetExtension(path);
            FileStream fis = System.IO.File.OpenRead(path);
            IExcelDataReader reader;
            if (ext.ToUpper().Equals(".XLSX"))
            {
                reader = ExcelReaderFactory.CreateOpenXmlReader(fis);
            }
            else
            {
                reader = ExcelReaderFactory.CreateBinaryReader(fis);
            }
            Entities.ExcelLoader exc;
            List<Entities.ExcelLoader> lst = new List<Entities.ExcelLoader>();
            reader.IsFirstRowAsColumnNames = true;
            System.Data.DataSet ds = reader.AsDataSet();
            System.Data.DataTable dt = ds.Tables["CARGA GODZILLA"]; //Prueba. Tiene que ser 0 o bien usar directamente reader.Read();
            
            var query = from System.Data.DataRow row in dt.Rows
                  select new Entities.ExcelLoader {
                      col1 = row[0].ToString(),
                      col2 = row[1].ToString(),
                      col3 = row[2].ToString(),
                      col4 = row[3].ToString(),
                      col5 = row[4].ToString(),
                      col6 = row[5].ToString(),
                      col7 = row[6].ToString(),
                      col8 = row[7].ToString(),
                      col9 = row[8].ToString(),
                      col10 = row[9].ToString(),
                      col11 = row[10].ToString(),
                      col12 = row[11].ToString()
                  };
            lst = query.ToList();
            TempData["LoadNTS"] = lst;
            return RedirectToAction("LoaderPreview");
        }

        public ActionResult LoaderPreview()
        {
            List<Entities.ExcelLoader> lst = TempData["LoadNTS"] as List<Entities.ExcelLoader>;
            return View(lst);
        }

        /// <summary>
        /// Creates the folder if needed.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <returns></returns>
        private bool CreateFolderIfNeeded(string path)
        {
            bool result = true;
            if (!Directory.Exists(path))
            {
                try
                {
                    Directory.CreateDirectory(path);
                }
                catch (Exception)
                {
                    /*TODO: You must process this exception.*/
                    result = false;
                }
            }
            return result;
        }

        #endregion


        #region constants

        private int channel;
        private static string BOY_TYD_DATA = "YTDData";
        private static string _PATH = "~/Views/Forms/";
        private string BOY = _PATH + "_BOYTable.cshtml";
        private string BOY_EDIT = _PATH + "_BOYEdit.cshtml";
		private string EDITED_BODY = _PATH + "_BOYEdited.cshtml";

        StrawmanConstants sc = new StrawmanConstants();

        #endregion

    }
}
